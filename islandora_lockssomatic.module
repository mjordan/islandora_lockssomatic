<?php

/**
 * @file
 * The main Islandora LOCKSS-O-Matic module file.
 */

/**
 * Implements hook_cron().
 */
function islandora_lockssomatic_cron() {
  if (variable_get('islandora_lockssomatic_use_cron', 1)) {
    islandora_lockssomatic_create_deposit();
  }
}

/**
 * Implements hook_menu().
 */
function islandora_lockssomatic_menu() {
  $items = array();
  $items['admin/islandora/lockssomatic'] = array(
    'title' => 'Islandora LOCKSS-O-Matic',
    'description' => 'Configure the Islandora LOCKSS-O-Matic module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_lockssomatic_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/lockss/permission'] = array(
    'title' => 'LOCKSS Permission Statement',
    'page callback' => 'islandora_lockssomatic_output_permission_statement',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function islandora_lockssomatic_theme() {
  return array(
    'atom_create_deposit' => array(
      'variables' => array(
        'au_title' => NULL,
        'uuid' => NULL,
        'site_name' => NULL,
        'entries' => NULL,
      ),
      'template' => 'atom-create-deposit',
    ),
  );
}

/**
 * Implements hook_islandora_bagit_post_create().
 */
function islandora_lockssomatic_islandora_bagit_post_create($pid, $bag_path) {
  // Copy each new bag to the sites public files directory so it can be
  // crawled by LOCKSS.
  $dest_dir = variable_get('islandora_lockssomatic_harvest_directory', conf_path() . '/files/lockssomatic');
  $dest_filename = basename($bag_path);
  if (variable_get('islandora_lockssomatic_move_copy', 1)) {
    $path_to_file = file_unmanaged_move($bag_path, $dest_dir, FILE_EXISTS_REPLACE);
  }
  else {
    $path_to_file = file_unmanaged_copy($bag_path, $dest_dir, FILE_EXISTS_REPLACE);
  }
}

/**
 * Prints the required part of the LOCKSS Permission Statement.
 */
function islandora_lockssomatic_output_permission_statement() {
  return <<<LPS
<img src="http://www.lockss.org/images/LOCKSS-small.gif" height="108" width="108">
LOCKSS system has permission to collect, preserve, and serve this Archival Unit
LPS;
}

/**
 * Generates an Atom XML document and passes it off to a cURL request.
 *
 * @param bool $in_progress
 *   Whether or not the request issues a true or false value
 *   for the 'X-In-Progress' header.
 * @param string $title
 *   The title assigned to the deposit.
 * 
 * @todo: Generate AU title if one is not provided.
 */
function islandora_lockssomatic_create_deposit($in_progress = TRUE, $title = NULL) {
  global $base_url;
  list($col_iri, $checksum_type) = islandora_lockssomatic_get_service_document();
  $harvest_dir = variable_get('file_public_path', conf_path() . '/files/lockssomatic');
  $harvest_dir = variable_get('islandora_lockssomatic_harvest_directory', $harvest_dir);
  $content_files = file_scan_directory($harvest_dir, '/\.(zip|7z|tgz)$/');
  if (count($content_files)) {
    // Items in this array are added to the Atom XML.
    $entries = array();
    // Items in this array correspond to the ones in $entries and are
    // logged in the database if the deposit is successful.
    $deposited_log_entries = array();
    foreach ($content_files as $content_file => $attribs) {
      $entry = array();
      $deposited_log_entry = array();
      $entry['url'] = variable_get('islandora_lockssomatic_hostname', $base_url) .
        '/' . $harvest_dir . '/' . $attribs->filename;
      $entry['size'] = filesize($attribs->uri);
      $deposited_log_entry['filename'] = $attribs->filename;
      $deposited_log_entry['size'] = $entry['size'];
      switch ($checksum_type) {
        case 'sha-1':
          $entry['checksum_type'] = 'sha-1';
          $entry['checksum_value'] = sha1_file($attribs->uri);
          break;

        case 'md5':
          $entry['checksum_type'] = 'md5';
          $entry['checksum_value'] = md5_file($attribs->uri);
          break;

        default:
          $entry['checksum_type'] = 'sha-1';
          $entry['checksum_value'] = sha1_file($attribs->uri);
      }
      $deposited_log_entry['checksum_type'] = $entry['checksum_type'];
      $deposited_log_entry['checksum_value'] = $entry['checksum_value'];
      $deposited_log_entries[] = $deposited_log_entry;

      // Only add the $entry to $entries if it hasn't already been
      // deposited.
      if (!islandora_lockssomatic_deposited($entry['checksum_value'])) {
        $entries[] = $entry;
      }
    }
    // @todo: Generate the AU title.
    if (!$title) {
      $title = 'A deposit created by Islandora LOCKSS-O-Matic';
    }
    $atom = theme('atom_create_deposit', array(
      'au_title' => $title,
      'uuid' => islandora_lockssomatic_generate_uuid(),
      'utc_timestamp' => gmdate("Y-m-d\TH:i:s\Z"),
      'site_name' => variable_get('site_name', ''),
      'entries' => $entries,
      )
    );
    // Only issue a deposit request if we have new Bags.
    if (count($entries)) {
      islandora_lockssomatic_post_deposit_request($in_progress, $col_iri, $atom, $deposited_log_entries);
    }
  }
}

/**
 * Issues a SWORD Deposit against LOCKSS-O-Matic.
 * 
 * @param bool $in_progress
 *   Whether or not the request issues a true or false value
 *   for the 'X-In-Progress' header.
 * @param string $col_iri
 *   The SWORD Col-IRI, as parsed from the Service Document. Content
 *   Provider ID will be appended.
 * @param string $atom
 *   The Atom XML that will be deposited.
 * 
 * @return bool
 *   FALSE if an error was caught.
 */
function islandora_lockssomatic_post_deposit_request($in_progress, $col_iri, $atom, $deposited_log_entries) {
  // Issue the Deposit request.
  if ($in_progress) {
    $in_progress_header = 'X-In-Progress: true';
  }
  else {
    $in_progress_header = 'X-In-Progress: false';
  }
  $curl_deposit = curl_init();
  curl_setopt($curl_deposit, CURLOPT_URL, $col_iri);
  curl_setopt($curl_deposit, CURLOPT_POSTFIELDS, $atom);
  curl_setopt($curl_deposit, CURLOPT_HTTPHEADER, array($in_progress_header));
  try {
    curl_exec($curl_deposit);
  }
  catch (Exception $e) {
    watchdog('lockssomatic', 'SWORD Deposit Request error: !error',
      array('!error' => $e->getMessage()));
    return FALSE;
  }
  // Expect a 201 response code.
  $deposit_request_info = curl_getinfo($curl_deposit);
  if ($deposit_request_info['http_code'] == '201') {
    // Add members of $entries to the database.
    islandora_lockssomatic_log_deposited_content($deposited_log_entries);
  }
  else {
    watchdog('lockssomatic', 'WORD Deposit Request error: response code is !code',
      array('!code' => $deposit_request_info['http_code']));
    return FALSE;
  }
}

/**
 * Issue a SWORD Service Document request against LOCKSS-O-Matic.
 * 
 * @return array
 *   The Col-IRI and the checksum type. 
 */
function islandora_lockssomatic_get_service_document() {
  // Get Service Document, including the content provider ID
  // as the value of 'X-On-Behalf-Of'. Expect a 200 in return.
  $content_provider_id = variable_get('islandora_lockssomatic_content_provider_id', '10');
  $sd_iri = variable_get('islandora_lockssomatic_lom_base_url', 'http://example.com/lockssomatic');
  $sd_iri .= '/api/sword/2.0/sd-iri';

  $curl_service_document = curl_init();
  curl_setopt($curl_service_document, CURLOPT_URL, $sd_iri);
  // @todo: Make X-In-Progress conditional.
  curl_setopt($curl_service_document, CURLOPT_HTTPHEADER,
    array('X-On-Behalf-Of: ' . $content_provider_id)
  );
  curl_setopt($curl_service_document, CURLOPT_RETURNTRANSFER, 1);
  try {
    $service_document = curl_exec($curl_service_document);
    $service_document_request_info = curl_getinfo($curl_service_document);
    if ($service_document_request_info['http_code'] != '200') {
      watchdog('lockssomatic', 'SWORD Service Document error: response code is !code',
        array('!code' => $service_document_request_info['http_code']));
      return FALSE;
    }
  }
  catch (Exception $e) {
    watchdog('lockssomatic', 'SWORD Service Document error: !error',
      array('!error' => $e->getMessage()));
  }

  // Parse out the the Col-IRI and lom:uploadChecksumType.
  try {
    $sd = new SimpleXMLElement($service_document);
    $col_iri = (string) $sd->workspace->collection['href'];
    $sd->registerXPathNamespace('lom', 'http://purl.org/lockssomatic/terms/SWORD');
    $checksum_type = $sd->xpath('//lom:uploadChecksumType');
  }
  catch (Exception $e) {
    watchdog('lockssomatic', 'SWORD Service Document error: !error',
      array('!error' => $e->getMessage()));
    return FALSE;
  }

  return array($col_iri, (string) $checksum_type[0]);
}

/**
 * Insert an entry into the database for each deposited Bag.
 * 
 * @param array $deposited_log_entries
 *   The Atom entries.
 */
function islandora_lockssomatic_log_deposited_content($deposited_log_entries) {
  foreach ($deposited_log_entries as $entry) {
    $entry['deposited'] = date("Y-m-d H:i:s");
    try {
      $return_value = db_insert('islandora_lockssomatic_content')
        ->fields($entry)
        ->execute();
    }
    catch (Exception $e) {
      drupal_set_message(t('db_insert failed. Message = %message, query= %query',
        array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
    }
  }
}

/**
 * Checks to see if the incoming checksum value is in the database.
 * 
 * @param string $checksum_value
 *   A checksum derived from a serialized Bag.
 * 
 * @return int
 *   1 or 0.
 */
function islandora_lockssomatic_deposited($checksum_value) {
  $num_checksum = db_query("SELECT count(checksum_value) FROM 
    {islandora_lockssomatic_content} WHERE checksum_value = :cs",
      array(':cs' => $checksum_value))
    ->fetchField();
  return $num_checksum;
}

/**
 * Generates a UUID v4 using PHP code.
 *
 * Code is borrowed from https://drupal.org/project/uuid, which
 * itself is based on http://php.net/uniqid#65879.
 * 
 * @return string
 *   A UUID.
 */
function islandora_lockssomatic_generate_uuid() {
  // The field names refer to RFC 4122 section 4.1.2.
  return sprintf('%04x%04x-%04x-4%03x-%04x-%04x%04x%04x',
    // 32 bits for "time_low".
    mt_rand(0, 65535), mt_rand(0, 65535),
    // 16 bits for "time_mid".
    mt_rand(0, 65535),
    // 12 bits after the 0100 of (version) 4 for "time_hi_and_version".
    mt_rand(0, 4095),
    bindec(substr_replace(sprintf('%016b', mt_rand(0, 65535)), '10', 0, 2)),
    // 8 bits, the last two of which (positions 6 and 7) are 01,
    // for "clk_seq_hi_res"
    // (hence, the 2nd hex digit after the 3rd hyphen can only be 1, 5, 9 or d)
    // 8 bits for "clk_seq_low" 48 bits for "node".
    mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)
  );
}
