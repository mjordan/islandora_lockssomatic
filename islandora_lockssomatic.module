<?php

/**
 * @file
 * The main Islandora LOCKSS-O-Matic module file.
 */

/**
 * Implements hook_cron().
 */
function islandora_lockssomatic_cron() {
  islandora_lockssomaitc_create_deposit();
}

/**
 * Implements hook_menu().
 */
function islandora_lockssomatic_menu() {
  $items = array();
  $items['admin/islandora/lockssomatic'] = array(
    'title' => 'Islandora LOCKSS-O-Matic',
    'description' => 'Configure the Islandora LOCKSS-O-Matic module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_lockssomatic_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/lockss/permission'] = array(
    'title' => 'LOCKSS Permission Statement',
    'page callback' => 'islandora_lockssomatic_output_permission_statement',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function islandora_lockssomatic_theme() {
  return array(
    'atom_create_deposit' => array(
      'variables' => array(
        'au_title' => NULL,
        'site_name' => NULL,
        'entries' => NULL,
      ),
      'template' => 'atom-create-deposit',
    ),
  );
}

/**
 * Implements hook_islandora_bagit_post_create().
 * 
 * @todo: Add filepaths to a database table so we can create
 * deposits in reasonably-sized chunks, e.g., in case of a large number
 * of Bags.
 */
function islandora_lockssomatic_islandora_bagit_post_create($pid, $bag_path) {
  // Copy each new bag to the sites public files directory so it can be
  // crawled by LOCKSS.
  $dest_dir = variable_get('islandora_lockssomatic_harvest_directory', $harvest_dir);
  $dest_filename = basename($bag_path);
  if (variable_get('islandora_lockssomatic_move_copy', 1)) {
    $path_to_file = file_unmanaged_move($bag_path, $dest_dir, FILE_EXISTS_REPLACE);
  }
  else {
    $path_to_file = file_unmanaged_copy($bag_path, $dest_dir, FILE_EXISTS_REPLACE);
  }
}

/**
 * Prints the required part of the LOCKSS Permission Statement.
 */
function islandora_lockssomatic_output_permission_statement() {
  $output = <<<LPS
<img src="http://www.lockss.org/images/LOCKSS-small.gif" height="108" width="108">
LOCKSS system has permission to collect, preserve, and serve this Archival Unit
LPS;

  return $output;
}

/**
 * Generates an Atom XML document and passes it off to a cURL request.
 * 
 * @todo: Get SWORD Service Document; create Atom XML and POST it to
 * LOCKSS-O-Matic. If we use a database table to store files to deposit,
 * get a chunk and then update their status to 'deposited' in the table.
 */
function islandora_lockssomaitc_create_deposit() {
  global $base_url;
  $harvest_dir = variable_get('file_public_path', conf_path() . '/files/lockssomatic');
  $harvest_dir = variable_get('islandora_lockssomatic_harvest_directory', $harvest_dir);
  $content_files = file_scan_directory($harvest_dir, '/\.(zip|7z|tgz)$/');
  if (count($content_files)) {
    $entries = array();
    foreach ($content_files as $content_file => $attribs) {
      $entry = array();
      $entry['url'] = $base_url . '/' . $harvest_dir . '/' . $attribs->filename;
      $entry['size'] = filesize($attribs->uri);
      // @todo: Build in logic to get md5, etc. Also, PHP doesn't have a
      // built-in UUID generator.
      $entry['checksum'] = sha1_file($attribs->uri);
      $entries[] = $entry;
    }
  }
  $atom = theme('atom_create_deposit', array(
    // @todo: Generate the AU title.
    'au_title' => 'A deposit created by Islandora',
    'site_name' => variable_get('site_name', ''),
    'entries' => $entries,
    )
  );
  islandora_lockssomatic_issue_create_deposit_request($atom);
}

/**
 * Issues a SWORD Deposit against LOCKSS-O-Matic.
 * 
 * @todo: Wrap these requests in try/catch.
 */
function islandora_lockssomatic_issue_create_deposit_request($atom) {
  // Get Service Document, including the content provider ID
  // as the value of 'X-On-Behalf-Of'. Expect a 200 in return.
  $content_provider_id = variable_get('islandora_lockssomatic_content_provider_id', '10');
  $sd_iri = variable_get('islandora_lockssomatic_lom_base_url', 'http://example.com/lockssomatic');
  $sd_iri .= '/api/sword/2.0/sd-iri';

  $curl_service_statement = curl_init();
  curl_setopt($curl_service_statement, CURLOPT_URL, $sd_iri);
  curl_setopt($curl_service_statement, CURLOPT_POSTFIELDS, $atom);
  // @todo: Make In-Progress conditional.
  curl_setopt($curl_service_statement, CURLOPT_HTTPHEADER,
    array('X-On-Behalf-Of: ' . $content_provider_id)
  );
  curl_exec($curl_service_statement);
  $service_doc_request_info = curl_getinfo($curl_service_statement);

  // Issue the Deposit request.
  $col_iri = variable_get('islandora_lockssomatic_lom_base_url', 'http://example.com/lockssomatic');
  $col_iri .= '/api/sword/2.0/col-iri/' . $content_provider_id;
  if ($service_doc_request_info['http_code'] == '200') {
    $curl_deposit = curl_init();
    curl_setopt($curl_deposit, CURLOPT_URL, $col_iri);
    curl_setopt($curl_deposit, CURLOPT_POSTFIELDS, $atom);
    // @todo: Make In-Progress conditional.
    curl_setopt($curl_deposit, CURLOPT_HTTPHEADER, array('X-In-Progress: true'));
    curl_exec($curl_deposit);
    // @todo: Check the response code. Expect a 201.
    $deposit_request_info = curl_getinfo($curl_deposit);
  }
}
